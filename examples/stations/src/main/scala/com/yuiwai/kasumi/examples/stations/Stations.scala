package com.yuiwai.kasumi.examples.stations

import com.yuiwai.kasumi.core.implementation._
import scala.util.chaining._

final case class Station(line: String, name: String)

object Data {
  type StrPair = (String, String)
  val lines: Map[String, List[String]] = Map(
    "東京メトロ千代田線" ->
      List("代々木上原", "代々木公園", "明治神宮前", "表参道", "乃木坂", "赤坂", "国会議事堂前", "霞ヶ関", "日比谷", "二重橋前",
        "大手町", "新御茶ノ水", "湯島", "根津", "千駄木", "西日暮里", "町屋", "北千住", "綾瀬", "北綾瀬"),
    "東京メトロ日比谷線" ->
      List("中目黒", "恵比須", "広尾", "六本木", "神谷町", "霞ヶ関", "日比谷", "銀座", "東銀座", "築地", "八丁堀", "茅場町",
        "人形町", "小伝馬町", "秋葉原", "仲御徒町", "上野", "入谷", "三ノ輪", "南千住", "北千住"),
    "東京メトロ銀座線" ->
      List("渋谷", "表参道", "外苑前", "青山一丁目", "赤坂見附", "溜池山王", "虎ノ門", "新橋", "銀座", "京橋", "日本橋", "三越前",
        "神田", "末広町", "上野広小路", "上野", "稲荷町", "田原町", "浅草"),
    "東京メトロ半蔵門線" ->
      List("渋谷", "表参道", "青山一丁目", "永田町", "半蔵門", "九段下", "神保町", "大手町", "三越前", "水天宮前", "清澄白河",
        "住吉", "錦糸町", "押上"),
    "東京メトロ東西線" ->
      List("中野", "落合", "高田馬場", "早稲田", "神楽坂", "飯田橋", "九段下", "竹橋", "大手町", "日本橋", "茅場町", "門前仲町",
        "木場", "東陽町", "南砂町", "西葛西", "葛西", "浦安", "南行徳", "行徳", "妙典", "原木中山", "西船橋"),
    "東葉高速鉄道" ->
      List("西船橋", "東海神", "飯山満", "北習志野", "船橋日大前", "八千代緑が丘", "八千代中央", "村上", "東葉勝田台"),
    "新京成線" ->
      List("松戸", "上本郷", "新松戸", "みのり台", "八柱", "常磐平", "五香", "元山", "くぬぎ山", "北初富", "新鎌ヶ谷", "初富",
        "鎌ヶ谷大仏", "二和向台", "三咲", "滝不動", "高根公団", "高根木戸", "北習志野", "習志野", "薬園台", "前原", "新津田沼",
        "京成津田沼")
  )
  val connections: List[(StrPair, StrPair)] = List(
    ("東京メトロ千代田線", "表参道") -> ("東京メトロ銀座線", "表参道"),
    ("東京メトロ千代田線", "表参道") -> ("東京メトロ半蔵門線", "表参道"),
    ("東京メトロ千代田線", "国会議事堂前") -> ("東京メトロ銀座線", "溜池山王"),
    ("東京メトロ千代田線", "霞ヶ関") -> ("東京メトロ日比谷線", "霞ヶ関"),
    ("東京メトロ千代田線", "日比谷") -> ("東京メトロ日比谷線", "日比谷"),
    ("東京メトロ千代田線", "大手町") -> ("東京メトロ半蔵門線", "大手町"),
    ("東京メトロ千代田線", "大手町") -> ("東京メトロ東西線", "大手町"),
    ("東京メトロ千代田線", "北千住") -> ("東京メトロ日比谷線", "北千住"),
    ("東京メトロ日比谷線", "銀座") -> ("東京メトロ銀座線", "銀座"),
    ("東京メトロ日比谷線", "仲御徒町") -> ("東京メトロ銀座線", "上野広小路"),
    ("東京メトロ日比谷線", "上野") -> ("東京メトロ銀座線", "上野"),
    ("東京メトロ日比谷線", "茅場町") -> ("東京メトロ東西線", "茅場町"),
    ("東京メトロ半蔵門線", "水天宮前") -> ("東京メトロ日比谷線", "人形町"),
    ("東京メトロ半蔵門線", "渋谷") -> ("東京メトロ銀座線", "渋谷"),
    ("東京メトロ半蔵門線", "表参道") -> ("東京メトロ銀座線", "表参道"),
    ("東京メトロ半蔵門線", "青山一丁目") -> ("東京メトロ銀座線", "青山一丁目"),
    ("東京メトロ半蔵門線", "永田町") -> ("東京メトロ銀座線", "赤坂見附"),
    ("東京メトロ半蔵門線", "三越前") -> ("東京メトロ銀座線", "三越前"),
    ("東京メトロ半蔵門線", "九段下") -> ("東京メトロ東西線", "九段下"),
    ("東京メトロ半蔵門線", "大手町") -> ("東京メトロ東西線", "大手町"),
    ("東京メトロ東西線", "日本橋") -> ("東京メトロ銀座線", "日本橋"),
    ("東京メトロ東西線", "西船橋") -> ("東葉高速鉄道", "西船橋"),
    ("東葉高速鉄道", "北習志野") -> ("新京成線", "北習志野"),
  )
  def edgeOfLine(lineName: String)(edge: Edge): Boolean =
    edge.from.value.asInstanceOf[Station].line == lineName &&
      edge.to.value.asInstanceOf[Station].line == lineName
  def line(name: String): Option[Route] = lines.get(name).
    flatMap(l => stations.route(Station(name, l.head), Station(name, l.last), edgeOfLine(name)))
  lazy val stations: Board = lines.foldLeft(Board.empty) { case (board, (lineName, sts)) =>
    sts.sliding(2).foldLeft(board) { (acc, xs) =>
      xs match {
        case h :: t :: Nil => acc ~ (Station(lineName, h), Station(lineName, t))
        case _ => acc
      }
    }.pipe { board =>
      connections.foldLeft(board) {
        case (acc, ((l1, s1), (l2, s2))) => acc ~ (Station(l1, s1), Station(l2, s2))
      }
    }
  }
}
